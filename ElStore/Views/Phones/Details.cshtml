@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ElStore.Models.ViewModel.DetailsVM

<div class="">
    <form method="post">
        <p>@Model.Product?.Brand @Model.Product?.Model</p>
        <p>@Model.DescriptionPc?.Text</p>
        <p>@Model.DescriptionPc?.RAM</p>
        <p>@Model.DescriptionPc?.FrontCamera</p>
        <p>@Model.DescriptionPc?.BackCamera</p>
        
        
        @foreach (var imageUrl in Model.Image.SelectMany(imageList => imageList))
        {
            <div class="p-3">
                <img src="@imageUrl" class="d-block w-100" style="max-width: 500px; max-height: 500px; object-fit: contain;" alt="Image">
            </div>
        }
        
        <!-- Видеоплеер -->
        <div id="player"></div>
        
    </form>
</div>

@section Scripts{
    <script>
          // 2. This code loads the IFrame Player API code asynchronously.
          var tag = document.createElement('script');
    
          tag.src = "https://www.youtube.com/iframe_api";
          var firstScriptTag = document.getElementsByTagName('script')[0];
          firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    
          // 3. This function creates an <iframe> (and YouTube player)
          //    after the API code downloads.
          var player;
          function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
              videoId: '@Model.Video',
              playerVars: {
                'playsinline': 1,
                'rel': 0,
                'showinfo' : 0,
                'controls' : 0,
              },
              events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
              }
            });
          }
    
          // 4. The API will call this function when the video player is ready.
          function onPlayerReady(event) {
            event.target.playVideo();
          }
    
          // 5. The API calls this function when the player's state changes.
          //    The function indicates that when playing a video (state=1),
          //    the player should play for six seconds and then stop.
          var done = false;
          function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
              setTimeout(stopVideo, 6000);
              done = true;
            }
          }
          function stopVideo() {
            player.stopVideo();
          }
        </script>
}